#!/usr/bin/env zx

import { $ } from 'zx'
import fs, {
  existsSync,
  renameSync,
  readdirSync,
  appendFileSync,
  unlinkSync,
  statSync,
  rmSync,
} from "fs";
import readDirRecursive from './utils.mjs'

/**
 * removing dist dir before we start
 */
if (fs.existsSync('./dist')) {
  fs.rmSync('./dist', { recursive: true })
}

/**
 * parallel build for all formats
 */
await Promise.all([
  $`vite build --config ./build/vite/configs/vite.cjs.js`,
  $`vite build --config ./build/vite/configs/vite.iife.js`,
  $`vite build --config ./build/vite/configs/vite.esm.js`,
  $`vite build --config ./build/vite/configs/vite.styles.js`,
  $`yarn build:types`,
])

/**
 * adding css imports to esm build components (css files generated by config.build.cssCodeSplit)
 */
readdirSync('./dist/esm/src/components')
  .forEach((folderName) => {
    const currentPath = `./dist/esm/src/components/${folderName}`

    const componentName = folderName.split('-').map((el) => {
      const split = el.split('')
      split[0] = split[0].toUpperCase()
      return split.join('')
    }).join('')

    const componentFilePath = `${currentPath}/${componentName}.js`
    const componentCssPath = `${currentPath}/${componentName}.css`

    existsSync(componentFilePath) &&
    existsSync(componentCssPath) &&
    appendFileSync(componentFilePath, `\n import './${componentName}.css'`);
  })

/**
 * moving common css (resources + components styles) to dist root
 */
const cjsStylesPath = './dist/cjs/style.css'
existsSync(cjsStylesPath) && renameSync(cjsStylesPath, './dist/vuestic-ui.css')

/**
 * deleting common css double
 */
const iifeStylesPath = './dist/iife/style.css'
existsSync(iifeStylesPath) && unlinkSync(iifeStylesPath)

/**
 * deleting empty files, renaming others
 */
const styleFiles = readDirRecursive('./dist/styles')
styleFiles.forEach((el) => {
  const isEmpty = statSync(el).size <= 1

  if (isEmpty) {
    rmSync(el)
  } else {
    const splitPath = el.split('/')
    const pathBase = splitPath.slice(0, splitPath.length - 1).join('/')

    const splitFileName = splitPath[splitPath.length - 1].split('.')
    // vite generates assets names as `[name].[hash].css`
    splitFileName.splice(1, 1)
    const newFileName = splitFileName.join('.')

    renameSync(el, `${pathBase}/${newFileName}`)
  }
})
